Let's see the pattern of how partition is made. We don't care about the middle elements of the Subarray, We just care about the boundaries of the Partition.

Let say arr= [a,b,c,d,e,f,g,h,i,j] and k=4
if i do partition like this:
a | b c d | e f g | h i j
sum= a+ b+d + e+g + h+j
sum = a+ (a+b) + (d+e) + (g+h) + j;
........................|__________________|
So we need maximize and minimize this part to get the answer.

So, We store sum of pair of consecutive elements in a vector and then sort it.
After that we just give the Difference between maxi and mini.

ex: arr=[1 , 3 , 5 , 1] k=2;

1 | 3 5 1 , sum is 1+1 + 3+1 => 1+ (1+3) +1
1 3 | 5 1 , sum is 1+3 + 5+1 => 1+ (3+5) +1
1 3 5 | 1 , sum is 1+5 + 1+1 => 1+ (5+1) +1
Complexity
Time complexity: O(NlogN), We sort the store vector.

Space complexity: O(N), we made a store vector